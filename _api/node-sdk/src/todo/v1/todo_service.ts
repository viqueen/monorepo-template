/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: todo/v1/todo_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./models";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace todo.v1 {
    export class CreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo?: dependency_1.todo.v1.Todo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo" in data && data.todo != undefined) {
                    this.todo = data.todo;
                }
            }
        }
        get todo() {
            return pb_1.Message.getWrapperField(this, dependency_1.todo.v1.Todo, 1) as dependency_1.todo.v1.Todo;
        }
        set todo(value: dependency_1.todo.v1.Todo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_todo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
        }): CreateRequest {
            const message = new CreateRequest({});
            if (data.todo != null) {
                message.todo = dependency_1.todo.v1.Todo.fromObject(data.todo);
            }
            return message;
        }
        toObject() {
            const data: {
                todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
            } = {};
            if (this.todo != null) {
                data.todo = this.todo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_todo)
                writer.writeMessage(1, this.todo, () => this.todo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todo, () => message.todo = dependency_1.todo.v1.Todo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRequest {
            return CreateRequest.deserialize(bytes);
        }
    }
    export class CreateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo?: dependency_1.todo.v1.Todo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo" in data && data.todo != undefined) {
                    this.todo = data.todo;
                }
            }
        }
        get todo() {
            return pb_1.Message.getWrapperField(this, dependency_1.todo.v1.Todo, 1) as dependency_1.todo.v1.Todo;
        }
        set todo(value: dependency_1.todo.v1.Todo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_todo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
        }): CreateResponse {
            const message = new CreateResponse({});
            if (data.todo != null) {
                message.todo = dependency_1.todo.v1.Todo.fromObject(data.todo);
            }
            return message;
        }
        toObject() {
            const data: {
                todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
            } = {};
            if (this.todo != null) {
                data.todo = this.todo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_todo)
                writer.writeMessage(1, this.todo, () => this.todo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todo, () => message.todo = dependency_1.todo.v1.Todo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateResponse {
            return CreateResponse.deserialize(bytes);
        }
    }
    export class ReadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): ReadRequest {
            const message = new ReadRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadRequest {
            return ReadRequest.deserialize(bytes);
        }
    }
    export class ReadResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo?: dependency_1.todo.v1.Todo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo" in data && data.todo != undefined) {
                    this.todo = data.todo;
                }
            }
        }
        get todo() {
            return pb_1.Message.getWrapperField(this, dependency_1.todo.v1.Todo, 1) as dependency_1.todo.v1.Todo;
        }
        set todo(value: dependency_1.todo.v1.Todo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_todo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
        }): ReadResponse {
            const message = new ReadResponse({});
            if (data.todo != null) {
                message.todo = dependency_1.todo.v1.Todo.fromObject(data.todo);
            }
            return message;
        }
        toObject() {
            const data: {
                todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
            } = {};
            if (this.todo != null) {
                data.todo = this.todo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_todo)
                writer.writeMessage(1, this.todo, () => this.todo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todo, () => message.todo = dependency_1.todo.v1.Todo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadResponse {
            return ReadResponse.deserialize(bytes);
        }
    }
    export class UpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo?: dependency_1.todo.v1.Todo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo" in data && data.todo != undefined) {
                    this.todo = data.todo;
                }
            }
        }
        get todo() {
            return pb_1.Message.getWrapperField(this, dependency_1.todo.v1.Todo, 1) as dependency_1.todo.v1.Todo;
        }
        set todo(value: dependency_1.todo.v1.Todo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_todo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
        }): UpdateRequest {
            const message = new UpdateRequest({});
            if (data.todo != null) {
                message.todo = dependency_1.todo.v1.Todo.fromObject(data.todo);
            }
            return message;
        }
        toObject() {
            const data: {
                todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
            } = {};
            if (this.todo != null) {
                data.todo = this.todo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_todo)
                writer.writeMessage(1, this.todo, () => this.todo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todo, () => message.todo = dependency_1.todo.v1.Todo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRequest {
            return UpdateRequest.deserialize(bytes);
        }
    }
    export class UpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo?: dependency_1.todo.v1.Todo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo" in data && data.todo != undefined) {
                    this.todo = data.todo;
                }
            }
        }
        get todo() {
            return pb_1.Message.getWrapperField(this, dependency_1.todo.v1.Todo, 1) as dependency_1.todo.v1.Todo;
        }
        set todo(value: dependency_1.todo.v1.Todo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_todo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
        }): UpdateResponse {
            const message = new UpdateResponse({});
            if (data.todo != null) {
                message.todo = dependency_1.todo.v1.Todo.fromObject(data.todo);
            }
            return message;
        }
        toObject() {
            const data: {
                todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
            } = {};
            if (this.todo != null) {
                data.todo = this.todo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_todo)
                writer.writeMessage(1, this.todo, () => this.todo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todo, () => message.todo = dependency_1.todo.v1.Todo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateResponse {
            return UpdateResponse.deserialize(bytes);
        }
    }
    export class DeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): DeleteRequest {
            const message = new DeleteRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRequest {
            return DeleteRequest.deserialize(bytes);
        }
    }
    export class DeleteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo?: dependency_1.todo.v1.Todo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo" in data && data.todo != undefined) {
                    this.todo = data.todo;
                }
            }
        }
        get todo() {
            return pb_1.Message.getWrapperField(this, dependency_1.todo.v1.Todo, 1) as dependency_1.todo.v1.Todo;
        }
        set todo(value: dependency_1.todo.v1.Todo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_todo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
        }): DeleteResponse {
            const message = new DeleteResponse({});
            if (data.todo != null) {
                message.todo = dependency_1.todo.v1.Todo.fromObject(data.todo);
            }
            return message;
        }
        toObject() {
            const data: {
                todo?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>;
            } = {};
            if (this.todo != null) {
                data.todo = this.todo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_todo)
                writer.writeMessage(1, this.todo, () => this.todo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todo, () => message.todo = dependency_1.todo.v1.Todo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteResponse {
            return DeleteResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTodoServiceService {
        static definition = {
            Create: {
                path: "/todo.v1.TodoService/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateResponse.deserialize(new Uint8Array(bytes))
            },
            Read: {
                path: "/todo.v1.TodoService/Read",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReadResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReadResponse.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/todo.v1.TodoService/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateResponse.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/todo.v1.TodoService/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Create(call: grpc_1.ServerUnaryCall<CreateRequest, CreateResponse>, callback: grpc_1.sendUnaryData<CreateResponse>): void;
        abstract Read(call: grpc_1.ServerUnaryCall<ReadRequest, ReadResponse>, callback: grpc_1.sendUnaryData<ReadResponse>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<UpdateRequest, UpdateResponse>, callback: grpc_1.sendUnaryData<UpdateResponse>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<DeleteRequest, DeleteResponse>, callback: grpc_1.sendUnaryData<DeleteResponse>): void;
    }
    export class TodoServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTodoServiceService.definition, "TodoService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Create: GrpcUnaryServiceInterface<CreateRequest, CreateResponse> = (message: CreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateResponse>, callback?: grpc_1.requestCallback<CreateResponse>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Read: GrpcUnaryServiceInterface<ReadRequest, ReadResponse> = (message: ReadRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReadResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReadResponse>, callback?: grpc_1.requestCallback<ReadResponse>): grpc_1.ClientUnaryCall => {
            return super.Read(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<UpdateRequest, UpdateResponse> = (message: UpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateResponse>, callback?: grpc_1.requestCallback<UpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<DeleteRequest, DeleteResponse> = (message: DeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteResponse>, callback?: grpc_1.requestCallback<DeleteResponse>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
    }
}
