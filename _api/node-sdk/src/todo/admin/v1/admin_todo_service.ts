/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: todo/admin/v1/admin_todo_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../v1/models";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace todo.admin.v1 {
    export class ListTodosRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            query?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
            }
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            query?: string;
        }): ListTodosRequest {
            const message = new ListTodosRequest({});
            if (data.query != null) {
                message.query = data.query;
            }
            return message;
        }
        toObject() {
            const data: {
                query?: string;
            } = {};
            if (this.query != null) {
                data.query = this.query;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.query.length)
                writer.writeString(1, this.query);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTodosRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTodosRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.query = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTodosRequest {
            return ListTodosRequest.deserialize(bytes);
        }
    }
    export class ListTodosResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todos?: dependency_1.todo.v1.Todo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todos" in data && data.todos != undefined) {
                    this.todos = data.todos;
                }
            }
        }
        get todos() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.todo.v1.Todo, 1) as dependency_1.todo.v1.Todo[];
        }
        set todos(value: dependency_1.todo.v1.Todo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            todos?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>[];
        }): ListTodosResponse {
            const message = new ListTodosResponse({});
            if (data.todos != null) {
                message.todos = data.todos.map(item => dependency_1.todo.v1.Todo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                todos?: ReturnType<typeof dependency_1.todo.v1.Todo.prototype.toObject>[];
            } = {};
            if (this.todos != null) {
                data.todos = this.todos.map((item: dependency_1.todo.v1.Todo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.todos.length)
                writer.writeRepeatedMessage(1, this.todos, (item: dependency_1.todo.v1.Todo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTodosResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTodosResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.todo.v1.Todo.deserialize(reader), dependency_1.todo.v1.Todo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTodosResponse {
            return ListTodosResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAdminTodoServiceService {
        static definition = {
            ListTodos: {
                path: "/todo.admin.v1.AdminTodoService/ListTodos",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListTodosRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListTodosRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListTodosResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListTodosResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ListTodos(call: grpc_1.ServerUnaryCall<ListTodosRequest, ListTodosResponse>, callback: grpc_1.sendUnaryData<ListTodosResponse>): void;
    }
    export class AdminTodoServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAdminTodoServiceService.definition, "AdminTodoService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ListTodos: GrpcUnaryServiceInterface<ListTodosRequest, ListTodosResponse> = (message: ListTodosRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListTodosResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListTodosResponse>, callback?: grpc_1.requestCallback<ListTodosResponse>): grpc_1.ClientUnaryCall => {
            return super.ListTodos(message, metadata, options, callback);
        };
    }
}
